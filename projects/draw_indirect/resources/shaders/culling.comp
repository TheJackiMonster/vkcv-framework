#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct Plane{
    vec3    pointOnPlane;
    float   padding0;
    vec3    normal;
    float   padding1;
};

struct DrawCommand{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set=0, binding=0, std140) readonly uniform cameraPlaneBuffer{
    Plane cameraPlanes[6];
};

layout(set=0, binding=1, std430) buffer DrawCommandsBuffer{
    DrawCommand commands[];
};

layout(set=0, binding=2, std430) readonly buffer boundingBoxBuffer{
    // x,y,z for meanPosition;
    // w for boundingSphereRadius
    vec4 boundingBoxes[];
};

bool isSphereInsideFrustum(vec3 spherePos, float sphereRadius){
    bool isInside = true;
    for(int i = 0; i < 6; i++){
        Plane p     = cameraPlanes[i];
        isInside    = isInside && dot(p.normal, spherePos - p.pointOnPlane) - sphereRadius < 0;
    }
    return isInside;
}

void main(){
    if(gl_GlobalInvocationID.x > commands.length()){
        return;
    }

    vec4 bbox = boundingBoxes[gl_GlobalInvocationID.x];
    if (isSphereInsideFrustum(bbox.xyz, bbox.z)){
        commands[gl_GlobalInvocationID.x].instanceCount = 1;
    }
    else{
        commands[gl_GlobalInvocationID.x].instanceCount = 0;
    }
}

