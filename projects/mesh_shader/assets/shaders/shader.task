#version 460
#extension GL_ARB_separate_shader_objects   : enable
#extension GL_EXT_mesh_shader               : require
#extension GL_GOOGLE_include_directive      : enable

#include "meshlet.inc"
#include "common.inc"

layout(local_size_x=32, local_size_y=1, local_size_z=1) in;

taskPayloadSharedEXT Task OUT;

layout( push_constant ) uniform constants {
    uint matrixIndex;
};

// TODO: reuse mesh stage binding at location 2 after required fix in framework
layout(std430, set=0, binding = 5) readonly buffer meshletBuffer {
    Meshlet meshlets[];
};

struct Plane {
    vec3  pointOnPlane;
    float padding0;
    vec3  normal;
    float padding1;
};

layout(set=0, binding = 3, std140) uniform cameraPlaneBuffer {
    Plane cameraPlanes[6];
};

layout(std430, set=0, binding = 4) readonly buffer matrixBuffer {
    ObjectMatrices objectMatrices[];
};

shared uint taskCount;

bool isSphereInsideFrustum(vec3 spherePos, float sphereRadius, Plane cameraPlanes[6]){
    bool isInside = true;
    for (int i = 0; i < 6; i++) {
        Plane p  = cameraPlanes[i];
        isInside = isInside && dot(p.normal, spherePos - p.pointOnPlane) - sphereRadius < 0;
    }
    return isInside;
}

void main() {
    const uint meshletIndex = gl_GlobalInvocationID.x;
    Meshlet meshlet;

    if (meshletIndex < meshlets.length()) {
        meshlet = meshlets[meshletIndex];
    }
    
    if (gl_LocalInvocationID.x == 0) {
        taskCount = 0;
    }

    memoryBarrierShared();
    barrier();
    
    // TODO: scaling support
    vec3 meshletPositionWorld = (vec4(meshlet.meanPosition, 1) * objectMatrices[matrixIndex].model).xyz;
    if (isSphereInsideFrustum(meshletPositionWorld, meshlet.boundingSphereRadius, cameraPlanes)) {
        const uint outIndex = atomicAdd(taskCount, 1);
        OUT.meshletIndices[outIndex] = meshletIndex;
    }

    memoryBarrierShared();
    barrier();

    OUT.mvp = objectMatrices[matrixIndex].mvp;
    EmitMeshTasksEXT(taskCount, 1, 1);
}