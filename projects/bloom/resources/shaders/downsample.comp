#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(set=0, binding=0) uniform texture2D                          inBlurImage;
layout(set=0, binding=1) uniform sampler                            inImageSampler;
layout(set=0, binding=2, r11f_g11f_b10f) uniform writeonly image2D  outBlurImage;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


void main()
{
    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, imageSize(outBlurImage)))){
        return;
    }

    ivec2 pixel_coord   = ivec2(gl_GlobalInvocationID.xy);
    vec2  pixel_size    = vec2(1.0f) / imageSize(outBlurImage);
    vec2  UV            = pixel_coord.xy * pixel_size;
    vec2  UV_offset     = UV + 0.5f * pixel_size;

    vec2 color_fetches[13] = {
        // center neighbourhood (RED)
        vec2(-1,  1), // LT
        vec2(-1, -1), // LB
        vec2( 1, -1), // RB
        vec2( 1,  1), // RT

        vec2(-2, 2), // LT
        vec2( 0, 2), // CT
        vec2( 2, 2), // RT

        vec2(0 ,-2), // LC
        vec2(0 , 0), // CC
        vec2(2,  0), // CR

        vec2(-2, -2), // LB
        vec2(0 , -2), // CB
        vec2(2 , -2)  // RB
    };

    float color_weights[13] = {
        // 0.5f
        1.f/8.f,
        1.f/8.f,
        1.f/8.f,
        1.f/8.f,

        // 0.125f
        1.f/32.f,
        1.f/16.f,
        1.f/32.f,

        // 0.25f
        1.f/16.f,
        1.f/8.f,
        1.f/16.f,

        // 0.125f
        1.f/32.f,
        1.f/16.f,
        1.f/32.f
    };

    vec3 sampled_color = vec3(0.0f);

    for(uint i = 0; i < 13; i++)
    {
        vec2 color_fetch = UV_offset + color_fetches[i] * pixel_size;
        vec3 color = texture(sampler2D(inBlurImage, inImageSampler), color_fetch).rgb;
        color *= color_weights[i];
        sampled_color += color;
    }

    imageStore(outBlurImage, pixel_coord, vec4(sampled_color, 1.f));
}