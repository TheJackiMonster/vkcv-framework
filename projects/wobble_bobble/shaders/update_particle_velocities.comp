#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "particle.inc"

layout(set=0, binding=0, std430) restrict buffer particleBuffer {
    Particle particles [];
};

layout(set=0, binding=1) uniform simulationBlock {
    Simulation simulation;
};

layout(set=0, binding=2) uniform texture3D gridImage;
layout(set=0, binding=3) uniform sampler gridSampler;

layout( push_constant ) uniform constants {
    float t;
    float dt;
    float speedfactor;
};

void main()	{
    memoryBarrierBuffer();
    memoryBarrierImage();

    float dts = dt * speedfactor;

    if (gl_GlobalInvocationID.x < particles.length()) {
        Particle particle = particles[gl_GlobalInvocationID.x];

        vec3 position = particle.minimal.position;
        float size = particle.minimal.size;
        float mass = particle.minimal.mass;

        ivec3 gridResolution = textureSize(sampler3D(gridImage, gridSampler), 0);
        ivec3 gridWindow = ivec3(size * 2.0f * gridResolution);

        mat3 affine_D = mat3(0.0f);
        mat3 affine_B = mat3(0.0f);

        vec3 velocity_pic = vec3(0.0f);
        vec3 velocity_flip = vec3(particle.minimal.velocity);

        int i, j, k;

        for (i = -gridWindow.x; i <= gridWindow.x; i++) {
            for (j = -gridWindow.y; j <= gridWindow.y; j++) {
                for (k = -gridWindow.z; k <= gridWindow.z; k++) {
                    vec3 offset = vec3(i, j, k) / gridResolution;
                    vec3 voxel = position + offset;

                    vec4 gridSample = texture(sampler3D(gridImage, gridSampler), voxel);

                    float weight = voxel_particle_weight(voxel, particle.minimal);
                    vec3 velocity = gridSample.xyz * weight / gridSample.w;

                    if (any(isnan(velocity)) || any(isinf(velocity))) {
                        velocity = vec3(0.0f);
                    }

                    affine_D += outerProduct(weight * offset, offset);
                    affine_B += outerProduct(velocity, offset);

                    velocity_pic += velocity;
                }
            }
        }

        barrier();
        memoryBarrierBuffer();

        mat3 mls_Q = mat3(0.0f);
        mat3 affine_C = mat3(0.0f);

        mat3 F = mat3(particle.deformation);

        mat3 D_inv = inverse(affine_D);
        float D_det = determinant(D_inv);

        if ((isnan(D_det)) || (isinf(D_det))) {
            D_inv = mat3(0.0f);
        } else {
            D_inv *= min(abs(D_det), 1.0f / EPSILON) / abs(D_det);
        }

        float J = max(determinant(F), EPSILON);
        float volume = sphere_volume(size);

        mat3 stress = mat3(0.0f);

        switch (simulation.type) {
            case SIM_TYPE_HYPERELASTIC:
                mat3 F_T = transpose(F);
                mat3 F_T_inv = inverse(F_T);

                mat3 P_term_0 = simulation.lame2 * (F - F_T_inv);
                mat3 P_term_1 = simulation.lame1 * log(J) * F_T_inv;

                mat3 P = P_term_0 + P_term_1;

                stress = P * F_T;
                break;
            case SIM_TYPE_FLUID:
                float pressure = simulation.K * (1.0f / pow(J, simulation.gamma) - 1.0f);

                stress = mat3(-pressure * J);
                break;
            default:
                break;
        }

        mls_Q -= dts * volume * stress * D_inv;

        affine_C = affine_B * D_inv;
        mls_Q += affine_C * mass;

        F = (mat3(1.0f) + dts * affine_C) * F;

        position = position + velocity_pic * dts;

        const float gridRange = (1.0f - 2.0f * size);

        for (uint i = 0; i < 3; i++) {
            if (position[i] - size < 0.0f) {
                float a = (size - position[i]) / gridRange;
                int b = int(floor(a));

                a = (a - b) * gridRange;

                if (b % 2 == 0) {
                    position[i] = size + a;
                } else {
                    position[i] = 1.0f - size - a;
                }

                if ((velocity_pic[i] < 0.0f) == (b % 2 == 0)) {
                    velocity_pic[i] *= -1.0f;
                }
            } else
            if (position[i] + size > 1.0f) {
                float a = (position[i] + size - 1.0f) / gridRange;
                int b = int(floor(a));

                a = (a - b) * gridRange;

                if (b % 2 == 0) {
                    position[i] = 1.0f - size - a;
                } else {
                    position[i] = size + a;
                }

                if ((velocity_pic[i] > 0.0f) == (b % 2 == 0)) {
                    velocity_pic[i] *= -1.0f;
                }
            }
        }

        barrier();
        memoryBarrierBuffer();

        particles[gl_GlobalInvocationID.x].minimal.position = position;
        particles[gl_GlobalInvocationID.x].minimal.velocity = velocity_pic;
        particles[gl_GlobalInvocationID.x].deformation = mat4(F);
        particles[gl_GlobalInvocationID.x].mls = mat4(mls_Q);
    }

    barrier();
    memoryBarrierBuffer();
}