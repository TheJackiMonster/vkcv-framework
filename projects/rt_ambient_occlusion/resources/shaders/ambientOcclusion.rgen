#version 460
#extension GL_EXT_ray_tracing : require

#define M_PI 3.1415926535897932384626433832795

// A location for a ray payload (we can have multiple of these)
layout(location = 0) rayPayloadEXT Payload {
  float hitSky;
  vec3 worldPosition;
  vec3 worldNormal;
} payload;

layout(binding = 0, set = 0, rgba16) uniform image2D outImg;            // the output image -> maybe use 16 bit values?
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;     // top level acceleration structure

layout( push_constant ) uniform constants {
    vec4 camera_position;   // as origin for ray generation
    vec4 camera_right;      // for computing ray direction
    vec4 camera_up;         // for computing ray direction
    vec4 camera_forward;    // for computing ray direction
} camera;

// random() and helpers from: https://www.shadertoy.com/view/XlycWh
float g_seed = 0;

uint base_hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

vec2 hash2(inout float seed) {
    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

void initRandom(uvec2 coord){
	g_seed = float(base_hash(coord)/float(0xffffffffU));
}

vec2 random(){
	return hash2(g_seed);
}

/**
 * Traces the ray from the camera and provides the intersection information.
 * @param[in,out] hitSky Defines if the ray has hit the sky
 * @param[in,out] pos The position of intersection
 * @param[in,out] norm The normal at the position of intersection
 */
void TraceCameraRay(out bool hitSky, out vec3 pos, out vec3 norm) {
  // Use a camera model to generate a ray for this pixel.
  vec2 uv = gl_LaunchIDEXT.xy + vec2(random()); // random breaks up aliasing
  uv /= vec2(gl_LaunchSizeEXT.xy);
  uv = (uv * 2.0 - 1.0) // normalize uv coordinates into Vulkan viewport space
    * vec2(1.0, -1.0);  // flips y-axis
  const vec3 orig   = camera.camera_position.xyz;
  const vec3 dir    = normalize(
    uv.x * camera.camera_right +
    uv.y * camera.camera_up +
    camera.camera_forward
  ).xyz;

  // Trace a ray into the scene; get back data in the payload.
  traceRayEXT(tlas,  // Acceleration structure
              gl_RayFlagsOpaqueEXT, // Ray flags, here saying "ignore intersection shaders"
              0xFF,                 // 8-bit instance mask, here saying "trace against all instances"
              0,                    // SBT record offset
              0,                    // SBT record stride for offset
              0,                    // Miss index
              orig,                 // Ray origin
              0.0,                  // Minimum t-value
              dir,                  // Ray direction
              1000.0,               // Maximum t-value
              0);                   // Location of payload

  // Read the values from the payload:
  hitSky    = (payload.hitSky > 0.0f);
  pos       = payload.worldPosition;
  norm      = payload.worldNormal;
}

/**
 * @brief Casts a shadow ray. Returns @p true, if the shadow ray hit the sky.
 * @param[in] orig The point of origin of the shadow ray.
 * @param[in] dir The direction of the shadow ray.
 */
float CastShadowRay(vec3 orig, vec3 dir) {
  payload.hitSky = 0.0f;
  traceRayEXT(tlas,   // Acceleration structure
              gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsTerminateOnFirstHitEXT, // Ray flags, here saying "ignore any hit shaders and closest hit shaders, and terminate the ray on the first found intersection"
              0xFF,    // 8-bit instance mask, here saying "trace against all instances"
              0,       // SBT record offset
              0,       // SBT record stride for offset
              0,       // Miss index
              orig,    // Ray origin
              0.0001,  // Minimum t-value - avoid self intersection
              dir,     // Ray direction
              1000.0,  // Maximum t-value
              0);      // Location of payload
  return payload.hitSky;
}

vec3 sampleCosineDistribution(vec2 xi){
	float phi = 2 * M_PI * xi.y;
	return vec3(
		sqrt(xi.x) * cos(phi),
		sqrt(1 - xi.x),
		sqrt(xi.x) * sin(phi)
    );
}

struct Basis{
	vec3 right;
	vec3 up;
	vec3 forward;
};

Basis buildBasisAroundNormal(vec3 N){
	Basis 	basis;
	basis.up 		= N;
	basis.right 	= abs(basis.up.x) < 0.99 ?  vec3(1, 0, 0) : vec3(0, 0, 1);
	basis.forward 	= normalize(cross(basis.up, basis.right));
	basis.right 	= cross(basis.up, basis.forward);
	return basis;
}

vec3 sampleTangentToWorldSpace(vec3 tangentSpaceSample, vec3 N){
	Basis tangentBasis = buildBasisAroundNormal(N);
	return (
		tangentBasis.right		* tangentSpaceSample.x +
		tangentBasis.up			* tangentSpaceSample.y +
		tangentBasis.forward 	* tangentSpaceSample.z
    );
}

void main(){
    uint rayCount = 16;    // the amount of rays to be casted

    initRandom(gl_LaunchIDEXT.xy);

    uvec2 pixel = gl_LaunchIDEXT.xy;
    bool pixelIsSky; // Does the pixel show the sky (not an object)?
    vec3 pos, norm;  // AO rays from where?
    TraceCameraRay(pixelIsSky, pos, norm);

    if (pixelIsSky){
        // Don't compute ambient occlusion for the sky
        imageStore(outImg, ivec2(pixel), vec4(0.8,0.8,0.8,1.0));
        return;
    }

    // Compute ambient occlusion
    float aoValue = 0.0f;
    for(uint i = 0; i < rayCount; i++){
        vec3 sampleTangentSpace = sampleCosineDistribution(random());
        vec3 sampleWorldSpace   = sampleTangentToWorldSpace(sampleTangentSpace, norm);

        aoValue += CastShadowRay(pos, sampleWorldSpace);
    }

    aoValue /= rayCount;
    
    imageStore(outImg, ivec2(pixel), vec4(vec3(aoValue), 1));
}
