#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 256) in;

#include "physics.inc"
#include "particle.inc"

layout(set=0, binding=0, std430) readonly buffer particleBuffer {
    particle_t particles [];
};

#include "voxel.inc"

layout(set=1, binding=0, r32ui) uniform uimage3D voxelRed;
layout(set=1, binding=1, r32ui) uniform uimage3D voxelGreen;
layout(set=1, binding=2, r32ui) uniform uimage3D voxelBlue;
layout(set=1, binding=3, r32ui) uniform uimage3D voxelDensity;

layout( push_constant ) uniform constants{
    mat4 mvp;
};

void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id >= particles.length()) {
        return;
    }

    vec3 position = particles[id].position;
    float lifetime = particles[id].lifetime;

    if (lifetime <= 0.0f) {
        return;
    }

    vec4 cs_pos = mvp * vec4(position, 1);

    if (abs(cs_pos.w) <= 0.0f) {
        return;
    }

    vec3 ndc_pos = cs_pos.xyz / cs_pos.w;
    vec3 pos = (ndc_pos + vec3(1, 1, 0)) * vec3(0.5f, 0.5f, 1.0f);

    if ((any(greaterThanEqual(pos, vec3(1.5f)))) || (any(lessThanEqual(pos, vec3(-0.5f))))) {
        return;
    }

    float size = particles[id].size;
    vec3 color = particles[id].color;

    voxel_add(voxelRed, pos, color.r);
    voxel_add(voxelGreen, pos, color.g);
    voxel_add(voxelBlue, pos, color.b);
    voxel_add(voxelDensity, pos, 1.0f);
}
