#version 450 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 256) in;

#include "physics.inc"
#include "particle.inc"

layout(set=0, binding=0, std430) readonly buffer particleBuffer {
    particle_t particles [];
};

#include "voxel.inc"

layout(set=1, binding=0, std430) buffer voxelBuffer {
    voxel_t voxel [];
};

layout( push_constant ) uniform constants{
    mat4 mvp;
};

void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id >= particles.length()) {
        return;
    }

    vec3 position = particles[id].position;
    float lifetime = particles[id].lifetime;

    if (lifetime <= 0.0f) {
        return;
    }

    vec4 cs_pos = mvp * vec4(position, 1);

    if (abs(cs_pos.w) <= 0.0f) {
        return;
    }

    vec3 ndc_pos = cs_pos.xyz / cs_pos.w;
    vec3 pos = (ndc_pos + vec3(1, 1, 0)) * vec3(0.5f, 0.5f, 1.0f);

    // clipping!

    float size = particles[id].size;
    vec3 color = particles[id].color;

    // write color into voxel at `pos * (resolution-1)` atomically!
}
