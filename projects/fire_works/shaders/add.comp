#version 440
#extension GL_GOOGLE_include_directive : enable

layout(set=0, binding=0, rgba16f) readonly uniform image2D inParticles;
layout(set=0, binding=1, rgba16f) readonly uniform image2D inSmoke;
layout(set=0, binding=2, rgba16f) readonly uniform image2D inTrails;
layout(set=0, binding=3, rgba16f) writeonly uniform image2D outImage;

#include "voxel.inc"

layout(set=1, binding=0, r32ui) uniform uimage3D voxelRed;
layout(set=1, binding=1, r32ui) uniform uimage3D voxelGreen;
layout(set=1, binding=2, r32ui) uniform uimage3D voxelBlue;
layout(set=1, binding=3, r32ui) uniform uimage3D voxelDensity;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main() {
    const ivec2 res = imageSize(outImage);

    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, res))){
        return;
    }

    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    vec4 outParticles = imageLoad(inParticles, uv);
    vec4 outSmoke = imageLoad(inSmoke, uv);
    vec4 outTrails = imageLoad(inTrails, uv);

    // TODO: add noise to the smoke here!

    vec4 result = vec4(
        outParticles.rgb * outParticles.a +
        outSmoke.rgb * outSmoke.a +
        outTrails.rgb * outTrails.a,

        outParticles.a + outSmoke.a + outTrails.a
    );

    const ivec3 voxelRes = imageSize(voxelDensity);

    ivec2 voxelUV = uv * voxelRes.xy / res;
    vec4 voxel = vec4(0.0f);

    for (int i = 0; i < voxelRes.z; i++) {
        const ivec3 voxelPos = ivec3(voxelUV, i);

        const float red = voxel_read(voxelRed, voxelPos);
        const float green = voxel_read(voxelGreen, voxelPos);
        const float blue = voxel_read(voxelBlue, voxelPos);
        const float density = voxel_read(voxelDensity, voxelPos);

        voxel = vec4(
            (voxel.rgb + vec3(red, green, blue) * density) * (1.0f - voxel.a),
            voxel.a + (density) * (1.0f - voxel.a)
        );
    }

    result = voxel;

    result.r = clamp(result.r, 0, 1);
    result.g = clamp(result.g, 0, 1);
    result.b = clamp(result.b, 0, 1);
    result.a = clamp(result.a, 0, 1);

    imageStore(outImage, uv, result);
}