#version 440
#extension GL_GOOGLE_include_directive : enable

layout(set=0, binding=0) uniform texture2D voxelTexture;
layout(set=0, binding=1) uniform sampler voxelSampler;

layout(set=0, binding=2, rgba16f) restrict readonly uniform image2D inParticles;
layout(set=0, binding=3, rgba16f) restrict readonly uniform image2D inSmoke;
layout(set=0, binding=4, rgba16f) restrict readonly uniform image2D inTrails;
layout(set=0, binding=5, rgba16f) restrict writeonly uniform image2D outImage;

layout(set=1, binding=0, std430) readonly buffer randomBuffer {
    float randomData [];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "physics.inc"
#include "smoke.inc"

#define NUM_VOXEL_SAMPLES 32

shared vec2 sc_data [NUM_VOXEL_SAMPLES];

void main() {
    const float localRadian = 0.25f * pi * randomData[gl_LocalInvocationIndex % randomData.length()];

    sc_data[gl_LocalInvocationIndex % NUM_VOXEL_SAMPLES] = vec2(
        sin(localRadian), cos(localRadian)
    );

    memoryBarrierShared();
    barrier();

    const ivec2 res = imageSize(outImage);

    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, res))){
        return;
    }

    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    vec4 outParticles = imageLoad(inParticles, uv);
    vec4 outSmoke = imageLoad(inSmoke, uv);
    vec4 outTrails = imageLoad(inTrails, uv);

    vec2 pos = (vec2(uv) + vec2(0.5f)) / vec2(res);

    vec4 outSamples = texture(sampler2D(voxelTexture, voxelSampler), pos);

    vec4 result = vec4(0.0f);

    result = smokeBlend(result, outParticles);
    result = smokeBlend(result, outTrails);
    result = smokeBlend(result, outSmoke);
    result = smokeBlend(result, outSamples * 0.1f);

    result.r = clamp(result.r, 0, 1);
    result.g = clamp(result.g, 0, 1);
    result.b = clamp(result.b, 0, 1);
    result.a = clamp(result.a, 0, 1);

    imageStore(outImage, uv, result);
}