#version 450 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 256) in;

#include "physics.inc"

#include "trail.inc"

layout(set=0, binding=0, std430) coherent buffer trailBuffer {
    trail_t trails [];
};

#include "point.inc"

layout(set=0, binding=1, std430) buffer pointBuffer {
    point_t points [];
};

#include "voxel.inc"

layout(set=1, binding=0, r32ui) uniform uimage3D voxelRed;
layout(set=1, binding=1, r32ui) uniform uimage3D voxelGreen;
layout(set=1, binding=2, r32ui) uniform uimage3D voxelBlue;
layout(set=1, binding=3, r32ui) uniform uimage3D voxelDensity;

#include "smoke.inc"

layout( push_constant ) uniform constants{
    mat4 mvp;
};

void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id >= trails.length()) {
        return;
    }

    const uint particleIndex = trails[id].particleIndex;
    const uint startIndex = trails[id].startIndex;

    uint useCount = trails[id].useCount;

    if (useCount <= 0) {
        return;
    }

    vec3 color = trails[id].color;
    float lifetime = trails[id].lifetime;

    if (lifetime <= 0.0f) {
        return;
    }

    for (uint i = 0; i < useCount; i++) {
        const uint x = (startIndex + i) % points.length();

        vec3 position = points[x].position;
        float size = points[x].size;

        const float density = smokeDensity(size);

        if (density <= mediumDensity) {
            break;
        }

        vec4 cs_pos = mvp * vec4(position, 1);

        if (abs(cs_pos.w) <= 0.0f) {
            return;
        }

        vec3 ndc_pos = cs_pos.xyz / cs_pos.w;
        vec3 pos = voxel_pos(ndc_pos);

        if ((any(greaterThanEqual(pos, vec3(1.5f)))) || (any(lessThanEqual(pos, vec3(-0.5f))))) {
            continue;
        }

        voxel_add(voxelRed, pos, color.r);
        voxel_add(voxelGreen, pos, color.g);
        voxel_add(voxelBlue, pos, color.b);
        voxel_add(voxelDensity, pos, density);
    }
}
