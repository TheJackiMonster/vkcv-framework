#version 460
#extension GL_EXT_ray_tracing : require

#define M_PI 3.1415926535897932384626433832795

// A location for a ray payload (we can have multiple of these)
layout(location = 0) rayPayloadEXT Payload {
      vec3 rayOrigin;
      vec3 rayDirection;
      vec3 previousNormal;
      vec3 directColor;
      vec3 indirectColor;
      int rayDepth;
      int rayActive;
      } payload;

layout(binding = 0, set = 0, rgba16) uniform image2D outImg;           // the output image -> maybe use 16 bit values?
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;     // top level acceleration structure (for the noobs here (you!))

layout( push_constant ) uniform constants {
    vec4 camera_position;   // as origin for ray generation
    vec4 camera_right;      // for computing ray direction
    vec4 camera_up;         // for computing ray direction
    vec4 camera_forward;    // for computing ray direction

    uint frameCount;        // what is this? the actual frame?
}camera;

float random(vec2 uv, float seed) {
  return fract(sin(mod(dot(uv, vec2(12.9898, 78.233)) + 1113.1 * seed, M_PI)) * 43758.5453);
}

void main(){
    vec2 uv = gl_LaunchIDEXT.xy + vec2(random(gl_LaunchIDEXT.xy, 0), random(gl_LaunchIDEXT.xy, 1));
    uv /= vec2(gl_LaunchSizeEXT.xy);
    uv = (uv * 2.0f - 1.0f) * vec2(1.0f, -1.0f);

    payload.rayOrigin = camera.camera_position.xyz;
    payload.rayDirection = normalize(uv.x * camera.camera_right + uv.y * camera.camera_up + camera.camera_forward).xyz;
    payload.previousNormal = vec3(0.0, 0.0, 0.0);

    payload.directColor = vec3(0.0, 0.0, 0.0);
    payload.indirectColor = vec3(0.0, 0.0, 0.0);
    payload.rayDepth = 0;

    payload.rayActive = 1;

    for (int x = 0; x < 16; x++) {
    traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, payload.rayOrigin, 0.001, payload.rayDirection, 10000.0, 0);
    }

    vec4 color = vec4(payload.directColor + payload.indirectColor, 1.0);

    if (camera.frameCount > 0) {
    vec4 previousColor = imageLoad(outImg, ivec2(gl_LaunchIDEXT.xy));
    previousColor *= camera.frameCount;

    color += previousColor;
    color /= (camera.frameCount + 1);
    }
    //color=vec4(1,0,0,1);//DEBUG
    imageStore(outImg, ivec2(gl_LaunchIDEXT.xy), color);
}
