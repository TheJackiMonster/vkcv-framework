#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(set=0, binding=0) uniform texture2D                          inUpsampleImage;
layout(set=0, binding=1) uniform sampler                            inImageSampler;
layout(set=0, binding=2, r11f_g11f_b10f) uniform image2D  outUpsampleImage;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, imageSize(outUpsampleImage)))){
        return;
    }


    ivec2 pixel_coord   = ivec2(gl_GlobalInvocationID.xy);
    vec2  pixel_size    = vec2(1.0f) / imageSize(outUpsampleImage);
    vec2  UV            = pixel_coord.xy * pixel_size;

    const float gauss_kernel[3] = {1.f, 2.f, 1.f};
    const float gauss_weight = 16.f;

    vec3 sampled_color = vec3(0.f);

    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j <= 1; j++)
        {
            vec2 sample_location = UV + vec2(j, i) * pixel_size;
            vec3 color = texture(sampler2D(inUpsampleImage, inImageSampler), sample_location).rgb;
            color *= gauss_kernel[j+1];
            color *= gauss_kernel[i+1];
            color /= gauss_weight;

            sampled_color += color;
        }
    }

    //vec3 prev_color = imageLoad(outUpsampleImage, pixel_coord).rgb;
    //float bloomRimStrength = 0.75f; // adjust this to change strength of bloom
    //sampled_color = mix(prev_color, sampled_color, bloomRimStrength);

    imageStore(outUpsampleImage, pixel_coord, vec4(sampled_color, 1.f));
}