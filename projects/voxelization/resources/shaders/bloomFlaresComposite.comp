#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(set=0, binding=0) uniform texture2D                          blurImage;
layout(set=0, binding=1) uniform texture2D                          lensImage;
layout(set=0, binding=2) uniform sampler                            linearSampler;
layout(set=0, binding=3, r11f_g11f_b10f) uniform image2D            colorBuffer;
layout(set=0, binding=4) uniform texture2D                          radialLUT;
layout(set=0, binding=5) uniform sampler                            radialLUTSampler;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout( push_constant ) uniform constants{
    vec3 cameraForward;
};

float starburst(vec2 uv){
    vec2 toCenter   = vec2(0.5) - uv;
    float d2        = dot(toCenter, toCenter);
    float falloff   = clamp(pow(d2 * 2, 2.5), 0, 1);
    
    float cosTheta  = acos(normalize(toCenter).x) * sign(toCenter.y);
    cosTheta        *= 4;
    
    float thetaOffset   = cameraForward.x + cameraForward.y;
    thetaOffset         *= 10;
    cosTheta            += thetaOffset;
    
    float burst     = texture(sampler2D(radialLUT, radialLUTSampler), vec2(cosTheta, 0.5)).r;
    burst           = pow(burst, 2);
    return mix(1, burst, falloff);
}

void main()
{
    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, imageSize(colorBuffer)))){
        return;
    }

    ivec2 pixel_coord   = ivec2(gl_GlobalInvocationID.xy);
    vec2  pixel_size    = vec2(1.0f) / imageSize(colorBuffer);
    vec2  UV            = pixel_coord.xy * pixel_size;

    vec4 composite_color = vec4(0.0f);

    vec3 blur_color   = texture(sampler2D(blurImage, linearSampler), UV).rgb;
    vec3 lens_color   = texture(sampler2D(lensImage, linearSampler), UV).rgb;
    vec3 main_color   = imageLoad(colorBuffer, pixel_coord).rgb;

    // composite blur and lens features
    float bloom_weight = 0.25f;
    float lens_weight  = 0.25f;
    float main_weight = 1 - (bloom_weight + lens_weight);

    lens_color *= starburst(UV);

    composite_color.rgb = blur_color * bloom_weight +
                          lens_color * lens_weight  +
                          main_color * main_weight;
                          
    //composite_color.rgb = vec3(1) * starburst(UV);

    imageStore(colorBuffer, pixel_coord, composite_color);
}