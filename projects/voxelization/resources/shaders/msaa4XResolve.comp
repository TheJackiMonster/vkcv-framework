#version 450
#extension GL_ARB_texture_multisample : enable

layout(set=0, binding=0)                    uniform texture2DMS     srcTexture;
layout(set=0, binding=1)                    uniform sampler         MSAASampler;                
layout(set=0, binding=2, r11f_g11f_b10f)    uniform image2D         outImage;


layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

float computeLuma(vec3 c){
    return dot(c, vec3(0.21, 0.72, 0.07));
}

vec3 tonemap(vec3 c){
    return c / (1 + computeLuma(c));
}

vec3 tonemapReverse(vec3 c){
    return c / (1 - computeLuma(c));
}

float reconstructionFilter(float d){
    // gau√ü filter, tuned so that distance of one has weight around 20%
    float a = 1.6; 
    return exp(-a * d*d);
}

void main(){

    if(any(greaterThanEqual(gl_GlobalInvocationID.xy, imageSize(outImage)))){
        return;
    }
    ivec2 uv            = ivec2(gl_GlobalInvocationID.xy);
    
    vec2 samplePositions[4] = {
     vec2(0.375, 0.125),
     vec2(0.875, 0.375),
     vec2(0.125, 0.625),
     vec2(0.625, 0.875)};
    
    vec3    color   = vec3(0);
    float   wTotal  = 0;
    
    // four samples from main pixel
    for(int i = 0; i < 4; i++){
        vec3 msaaSample = texelFetch(sampler2DMS(srcTexture, MSAASampler), uv, i).rgb;
        float d         = distance(vec2(0.5), samplePositions[i]);
        float w         = reconstructionFilter(d);
        color           += tonemap(msaaSample) * w;
        wTotal          += w;
    }
    
    ivec2 neighbourOffsets[4] = {
        ivec2( 1,  0),   // right
        ivec2(-1,  0),   // left
        ivec2( 0,  1),   // top
        ivec2( 0, -1)    // bot
    };
    
    int neighbourSampleIndices[8] = {
        0, 2, // left  samples of right neighbour
        1, 3, // right samples of left  neighbour
        2, 3, // bot   samples of top   neighbour
        0, 1  // top   samples of bot   neighbour
    };
    
    // two additional samples from each neighbour
    for(int neighbour = 0; neighbour < 4; neighbour++){
        for(int i = 0; i < 2; i++){
            int     sampleIndex = neighbourSampleIndices[neighbour * 2 + i];
            ivec2   pixelOffset = neighbourOffsets[neighbour];
            ivec2   pixelUV     = uv + pixelOffset;
            vec3    msaaSample  = texelFetch(sampler2DMS(srcTexture, MSAASampler), pixelUV, sampleIndex).rgb;
            float   d           = distance(vec2(0.5), samplePositions[sampleIndex] + pixelOffset);
            float   w           = reconstructionFilter(d);
            color               += tonemap(msaaSample) * w;
            wTotal              += w;
        }
    }    
    color /= wTotal;
    color = tonemapReverse(color);
    
    imageStore(outImage, uv, vec4(color, 0.f));
}