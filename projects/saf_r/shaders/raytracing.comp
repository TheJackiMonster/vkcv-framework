#version 450 core
#extension GL_ARB_separate_shader_objects : enable

// defines constants
const float pi      = 3.1415926535897932384626433832795;
const float hitBias = 0.0001;   // used to offset hits to avoid self intersection

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

//structs of materials, lights, spheres and intersection for use in compute shader
struct Material {
    vec3 albedo;
    vec3 diffuse_color;
    float specular_exponent;
};

struct Light{
    vec3 position;
    float intensity;
};

struct Sphere{
    vec3 center;
    float radius;
    Material material;
};

struct Intersection{
    bool hit;
    vec3 pos;
    vec3 N;
    Material material;
};


//incoming light data
layout(std430, binding = 0) coherent buffer lights{
    Light inLights[];
};

// incoming sphere data
layout(std430, binding = 1) coherent buffer spheres{
    Sphere inSpheres[];
};

// output store image as swapchain input
layout(set=0, binding = 2, rgba8) uniform image2D outImage;

// incoming constants, because size of dynamic arrays cannot be computed on gpu
layout( push_constant ) uniform constants{
    mat4 viewToWorld;
    int lightCount;
    int sphereCount;
};

/*
* the rayIntersect function checks, if a ray from the raytracer passes through the sphere, hits the sphere or passes by the the sphere
* @param vec3: origin of ray
* @param vec3: direction of ray
* @param float: distance of the ray to the sphere (out because there are no references in shaders)
* @return bool: if ray interesects sphere or not (out because there are no references in shaders)
*/

bool rayIntersect(const vec3 origin, const vec3 dir, out float t0, const int id){
    vec3 L = inSpheres[id].center - origin;
    float tca = dot(L, dir);
    float d2 = dot(L, L) - tca * tca;
    if (d2 > inSpheres[id].radius * inSpheres[id].radius){
        return false;
    }
    float thc = float(sqrt(inSpheres[id].radius * inSpheres[id].radius - d2));
    t0 = tca - thc;
    float t1 = tca + thc;
    if (t0 < 0) {
        t0 = t1;
    }
    if (t0 < 0){
        return false;
    }
    return true;
}

/*
* sceneIntersect iterates over whole scene (over every single object) to check for intersections
* @param vec3: Origin of the ray
* @param vec3: direction of the ray
* @return: Intersection struct with hit(bool) position, normal and material of sphere
*/

Intersection sceneIntersect(const vec3 rayOrigin, const vec3 rayDirection) {
    //distance if spheres will be rendered
    float   min_d    = 1.0 / 0.0;  // lets start with something big
    
    Intersection intersection;
    intersection.hit = false;
    
    //go over every sphere, check if sphere is hit by ray, save if hit is near enough into intersection struct
    for (int i = 0; i < sphereCount; i++) {
        float d;
        if (rayIntersect(rayOrigin, rayDirection, d, i)) {
            
            intersection.hit = true;
            
            if(d < min_d){
                min_d = d;
                intersection.pos        = rayOrigin + rayDirection * d;
                intersection.N          = normalize(intersection.pos - inSpheres[i].center);
                intersection.material   = inSpheres[i].material;
            }
        }
    }

    float checkerboard_dist = min_d;
    if (abs(rayDirection.y)>1e-3)  {
        float d = -(rayOrigin.y + 4) / rayDirection.y; // the checkerboard plane has equation y = -4
        vec3 pt = rayOrigin + rayDirection * d;
        if (d > 0 && abs(pt.x) < 10 && pt.z<-10 && pt.z>-30 && d < min_d) {
            checkerboard_dist = d;
            intersection.hit = true;
            intersection.pos = pt;
            intersection.N = vec3(0, 1, 0);
            intersection.material = inSpheres[0].material;
        }
    }
    return intersection;
}

/*
* biasHitPosition computes the new hitposition with respect to the raydirection and a bias
* @param vec3: Hit Position
* @param vec3: direction of ray
* @param vec3: N(ormal)
* @return vec3: new Hit position depending on hitBias (used to offset hits to avoid self intersection)
*/
vec3 biasHitPosition(vec3 hitPos, vec3 rayDirection, vec3 N){
    return hitPos + sign(dot(rayDirection, N)) * N * hitBias;
}

/*
* computeHitLighting iterates over all lights to compute the color for every ray
* @param Intersection: struct with all the data of the intersection
* @param vec3: Raydirection
* @param float: material albedo of the intersection
* @return colour/shadows of sphere with illumination
*/
vec3 computeHitLighting(Intersection intersection, vec3 V, out float outReflectionThroughput){
    
    float lightIntensityDiffuse  = 0;
    float lightIntensitySpecular = 0;

    //iterate over every light source to compute sphere colours/shadows
    for (int i = 0; i < lightCount; i++) {

        //compute normal + distance between light and intersection
        vec3   L = normalize(inLights[i].position - intersection.pos);
        float  d = distance(inLights[i].position, intersection.pos);

        //compute shadows
        vec3 shadowOrigin = biasHitPosition(intersection.pos, L, intersection.N);
        Intersection shadowIntersection = sceneIntersect(shadowOrigin, L);
        bool isShadowed = false;
        if(shadowIntersection.hit){
            isShadowed = distance(shadowIntersection.pos, shadowOrigin) < d;
        }
        if(isShadowed){
            continue;
        }

        lightIntensityDiffuse  += inLights[i].intensity * max(0.f, dot(L, intersection.N));
        lightIntensitySpecular += pow(max(0.f, dot(reflect(V, intersection.N), L)), intersection.material.specular_exponent) * inLights[i].intensity;
    }

    outReflectionThroughput = intersection.material.albedo[2];
    return intersection.material.diffuse_color * lightIntensityDiffuse * intersection.material.albedo[0] + lightIntensitySpecular * intersection.material.albedo[1];
}

/*
* castRay throws a ray out of the initial origin with respect to the initial direction checks for intersection and refelction
* @param vec3: initial origin of ray
* @param vec3: initial direction of ray
* @param int: max depth o ray reflection
* @return s
*/

vec3 castRay(const vec3 initialOrigin, const vec3 initialDirection, int max_depth) {
    
    vec3 skyColor = vec3(0.2, 0.7, 0.8);
    vec3 rayOrigin    = initialOrigin;
    vec3 rayDirection = initialDirection;
    
    float   reflectionThroughput    = 1;
    vec3    color                   = vec3(0);

    //iterate to max depth of reflections
    for(int i = 0; i < max_depth; i++){

        Intersection intersection = sceneIntersect(rayOrigin, rayDirection);

        vec3 hitColor;
        float hitReflectionThroughput;

        if(intersection.hit){
            hitColor = computeHitLighting(intersection, rayDirection, hitReflectionThroughput);
        }else{
            hitColor = skyColor;
        }

        color                   += hitColor * reflectionThroughput;
        reflectionThroughput    *= hitReflectionThroughput;

        //if there is no intersection of a ray with a sphere, break out of the loop
        if(!intersection.hit){
            break;
        }

        //compute new direction and origin of the reflected ray
        rayDirection    = normalize(reflect(rayDirection, intersection.N));
        rayOrigin       = biasHitPosition(intersection.pos, rayDirection, intersection.N);
    }

    return color;
}

/*
* computeDirection transforms the pixel coords to worldspace coords
* @param ivec2: pixel coordinates
* @return vec3: world coordinates
*/
vec3 computeDirection(ivec2 coord){

    ivec2 outImageRes   = imageSize(outImage);
    float fovDegree     = 45;
    float fov           = fovDegree * pi / 180;
    
    vec2 uv     = coord / vec2(outImageRes);
    vec2 ndc    = 2 * uv - 1;
    
    float tanFovHalf    = tan(fov / 2.f);
    float aspectRatio   = outImageRes.x / float(outImageRes.y);
    float x             =  ndc.x * tanFovHalf * aspectRatio;
    float y             = -ndc.y * tanFovHalf;
    
    vec3 directionViewSpace     = normalize(vec3(x, y, 1));
    vec3 directionWorldSpace    = mat3(viewToWorld) * directionViewSpace;
    return directionWorldSpace;
}

// the main function
void main(){
    ivec2 coord     = ivec2(gl_GlobalInvocationID.xy);
    int max_depth   = 4;
    vec3 direction  = computeDirection(coord);
    vec3 cameraPos  = viewToWorld[3].xyz;
    vec3 color      = castRay(cameraPos, direction, max_depth);
    
    imageStore(outImage, coord, vec4(color, 0.f));
}