#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

const float PI = 3.1415926535897932384626433832795;

#include "particle_params.inc"

layout(local_size_x = 256) in;

struct Particle
{
    vec3 position;
    float padding;
    vec3 velocity;
    float density;
    vec3 force;
    float pressure;
    
};

layout(std430, binding = 0) readonly buffer buffer_inParticle
{
    Particle inParticle[];
};

layout(std430, binding = 1) writeonly buffer buffer_outParticle
{
    Particle outParticle[];
};

layout( push_constant ) uniform constants{
    float deltaTime;
    float particleCount;
};

float poly6(float r)    
{
    return (315.f/(64.f*PI*pow(h, 9)) * pow((pow(h,2)-pow(r,2)), 3)) * int(0<=r && r<=h);
}

float densitySum = 0.f;

void main() {
    uint id = gl_GlobalInvocationID.x;

    if(id >= int(particleCount))
    {
        return;
    }

    for(uint i = 0; i < int(particleCount); i++)   
    {
        if (id != i)
        {
            float dist = distance(inParticle[id].position, inParticle[i].position);
            densitySum += mass * poly6(dist);
        }
    }
    outParticle[id].density = max(densitySum, 0.001f);
    outParticle[id].pressure = max((densitySum - offset), 0) * gasConstant;
    outParticle[id].position = inParticle[id].position;
    outParticle[id].velocity = inParticle[id].velocity;
    outParticle[id].force = inParticle[id].force;
}
