#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

const float PI = 3.1415926535897932384626433832795;

layout(local_size_x = 256) in;

struct Particle
{
    vec3 position;
    float padding;
    vec3 velocity;
    float density;
    vec3 force;
    float pressure;
    
};

layout(std430, binding = 0) readonly buffer buffer_inParticle
{
    Particle inParticle[];
};

layout(std430, binding = 1) writeonly buffer buffer_outParticle
{
    Particle outParticle[];
};

layout( push_constant ) uniform constants{
    float h;
    float mass;
    float gasConstant;
    float offset;
    float gravity;
    float viscosity;
    float ABSORBTION;
    float dt;
    vec3 gravityDir;
    float particleCount;
};

float poly6(float r)    
{
    return (315.f * pow((pow(h,2)-pow(r,2)), 3)/(64.f*PI*pow(h, 9))) * int(r<=h);
}

float densitySum = 0.f;

shared vec3 position_data [256];

void main() {
    
    uint id = gl_GlobalInvocationID.x;

    if(id >= int(particleCount))
    {
        return;
    }

    uint index_offset = gl_WorkGroupID.x * gl_WorkGroupSize.x;

    position_data[gl_LocalInvocationIndex] = inParticle[id].position;

    memoryBarrierShared();
    barrier();

    for(uint j = 1; j < gl_WorkGroupSize.x; j++) {
        uint i = (gl_LocalInvocationIndex + j) % gl_WorkGroupSize.x;

        float dist = distance(position_data[gl_LocalInvocationIndex], position_data[i]);
        densitySum += mass * poly6(dist);
    }

    for(uint i = 0; i < index_offset; i++)
    {
        float dist = distance(position_data[gl_LocalInvocationIndex], inParticle[i].position);
        densitySum += mass * poly6(dist);
    }

    for(uint i = index_offset + gl_WorkGroupSize.x; i < int(particleCount); i++)
    {
        float dist = distance(position_data[gl_LocalInvocationIndex], inParticle[i].position);
        densitySum += mass * poly6(dist);
    }

    outParticle[id].density = max(densitySum,0.0000001f);
    outParticle[id].pressure = max((densitySum - offset), 0.0000001f) * gasConstant;
    outParticle[id].position = position_data[gl_LocalInvocationIndex];
    outParticle[id].velocity = inParticle[id].velocity;
    outParticle[id].force = inParticle[id].force;
}
