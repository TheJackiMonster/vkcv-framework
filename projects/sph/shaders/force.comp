#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

const float PI = 3.1415926535897932384626433832795;

layout(local_size_x = 256) in;

struct Particle
{
    vec3 position;
    float padding;
    vec3 velocity;
    float density;
    vec3 force;
    float pressure;
    
};

layout(std430, binding = 1) readonly buffer buffer_inParticle
{
    Particle inParticle[];
};

layout(std430, binding = 0) writeonly buffer buffer_outParticle
{
    Particle outParticle[];
};

layout( push_constant ) uniform constants{
    float h;
    float mass;
    float gasConstant;
    float offset;
    float gravity;
    float viscosity;
    float ABSORBTION;
    float dt;
    vec3 gravityDir;
    float particleCount;
};

float grad_spiky(float r)
{
    return -45.f / (PI * pow(h, 6)) * pow((h-r), 2);
}

float laplacian(float r)
{
    return (45.f / (PI * pow(h,6)) * (h - r));
}

vec3 pressureForce = vec3(0, 0, 0);
vec3 viscosityForce = vec3(0, 0, 0); 
vec3 externalForce = vec3(0, 0, 0);

struct ParticleData
{
    vec3 position;
    float density;
    vec3 velocity;
    float pressure;
};

shared ParticleData particle_data [256];

void main() {
    uint id = gl_GlobalInvocationID.x;

    if(id >= int(particleCount))
    {
        return;
    }

    uint index_offset = gl_WorkGroupID.x * gl_WorkGroupSize.x;

    particle_data[gl_LocalInvocationIndex].position = inParticle[id].position;
    particle_data[gl_LocalInvocationIndex].density  = inParticle[id].density;
    particle_data[gl_LocalInvocationIndex].velocity = inParticle[id].velocity;
    particle_data[gl_LocalInvocationIndex].pressure = inParticle[id].pressure;

    memoryBarrierShared();
    barrier();

    const float h6 = pow(h, 6);
    externalForce = particle_data[gl_LocalInvocationIndex].density * gravity * vec3(-gravityDir.x,gravityDir.y,gravityDir.z);

    for(uint j = 1; j < gl_WorkGroupSize.x; j++) {
        uint i = (gl_LocalInvocationIndex + j) % gl_WorkGroupSize.x;

        vec3 dir = particle_data[gl_LocalInvocationIndex].position - particle_data[i].position;
        float dist = length(dir);

        if ((dist > 0.0f) && (dist <= h))
        {
            const float h_dist = (h - dist);

            float laplacian = 45.f / (PI * h6) * h_dist;
            float grad_spiky = -1.0f * laplacian * h_dist;

            pressureForce += mass * -(particle_data[gl_LocalInvocationIndex].pressure + particle_data[i].pressure)/(2.f * particle_data[i].density) * grad_spiky * normalize(dir);
            viscosityForce += mass * (particle_data[i].velocity - particle_data[gl_LocalInvocationIndex].velocity)/particle_data[i].density * laplacian;
        }
    }

    for(uint i = 0; i < index_offset; i++)
    {
        vec3 dir = particle_data[gl_LocalInvocationIndex].position - inParticle[i].position;
        float dist = length(dir);

        if ((dist > 0.0f) && (dist <= h))
        {
            const float h_dist = (h - dist);

            float laplacian = 45.f / (PI * h6) * h_dist;
            float grad_spiky = -1.0f * laplacian * h_dist;

            pressureForce += mass * -(particle_data[gl_LocalInvocationIndex].pressure + inParticle[i].pressure)/(2.f * inParticle[i].density) * grad_spiky * normalize(dir);
            viscosityForce += mass * (inParticle[i].velocity - particle_data[gl_LocalInvocationIndex].velocity)/inParticle[i].density * laplacian;
        }
    }

    for(uint i = index_offset + gl_WorkGroupSize.x; i < int(particleCount); i++)
    {
        vec3 dir = particle_data[gl_LocalInvocationIndex].position - inParticle[i].position;
        float dist = length(dir);

        if ((dist > 0.0f) && (dist <= h))
        {
            const float h_dist = (h - dist);

            float laplacian = 45.f / (PI * h6) * h_dist;
            float grad_spiky = -1.0f * laplacian * h_dist;

            pressureForce += mass * -(particle_data[gl_LocalInvocationIndex].pressure + inParticle[i].pressure)/(2.f * inParticle[i].density) * grad_spiky * normalize(dir);
            viscosityForce += mass * (inParticle[i].velocity - particle_data[gl_LocalInvocationIndex].velocity)/inParticle[i].density * laplacian;
        }
    }

    viscosityForce *= viscosity;

    outParticle[id].force = externalForce + pressureForce + viscosityForce;
    outParticle[id].density = particle_data[gl_LocalInvocationIndex].density;
    outParticle[id].pressure = particle_data[gl_LocalInvocationIndex].pressure;
    outParticle[id].position = particle_data[gl_LocalInvocationIndex].position;
    outParticle[id].velocity = particle_data[gl_LocalInvocationIndex].velocity;
}
