#version 450 core
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 256) in;

struct Particle
{
    vec3 position;
    float lifeTime;
    vec3 velocity;
    float padding_2;
    vec3 reset_velocity;
    float padding_3;
};

layout(std430, binding = 0) readonly buffer buffer_inParticle
{
    Particle inParticle[];
};

layout(std430, binding = 1) writeonly buffer buffer_outParticle
{
    Particle outParticle[];
};

layout( push_constant ) uniform constants{
    float deltaTime;
    float particleCount;
};

vec3 attraction(vec3 pos, vec3 attractPos)
{
    vec3 delta = attractPos - pos;
    const float damp = 0.5;
    float dDampedDot = dot(delta, delta) + damp;
    float invDist = 1.0f / sqrt(dDampedDot);
    float invDistCubed = invDist*invDist*invDist;
    return delta * invDistCubed * 0.0035;
}

vec3 repulsion(vec3 pos, vec3 attractPos)
{
    vec3 delta = attractPos - pos;
    float targetDistance = sqrt(dot(delta, delta));
    return delta * (1.0 / (targetDistance * targetDistance * targetDistance)) * -0.000035;
}


const int n = 3;
vec3 gravity = vec3(0,-9.8,0);
vec3 gravityPoint[n] = vec3[n](vec3(-0.5, 0.5, 0),vec3(0.5, 0.5, 0),vec3(0, -0.5, 0));
//vec3 gravityPoint[n] = vec3[n](vec3(-0.5, 0.5, 0));
void main() {
    uint id = gl_GlobalInvocationID.x;

    if(id >= int(particleCount))
    {
        return;
    }

    outParticle[id] = inParticle[id];

    outParticle[id].lifeTime = inParticle[id].lifeTime - deltaTime;
    vec3 pos = inParticle[id].position;
    vec3 vel = inParticle[id].velocity;
    if(inParticle[id].lifeTime < 0.f)
    {
        outParticle[id].lifeTime = 7.f;
        pos = vec3(0);
        vel = inParticle[id].reset_velocity;
        outParticle[id].velocity = inParticle[id].reset_velocity;
    }

    for(int i = 0; i < n; i++)
    {
        vel += deltaTime * deltaTime * deltaTime * normalize(max(2 - distance(pos,gravityPoint[i]),0.1) * gravityPoint[i] - pos);
    }

    vel = (-vel * 0.01);
    pos += normalize(vel) * deltaTime;
    outParticle[id].position = pos;

    float weight = 1.0;
    outParticle[id].velocity = vel;
}
