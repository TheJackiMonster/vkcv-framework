#version 450 core
#extension GL_ARB_separate_shader_objects : enable

#define ABSORBTION 0.9
#define dt 0.0001

layout(local_size_x = 256) in;

struct Particle
{
    vec3 position;
    float padding;
    vec3 velocity;
    float density;
    vec3 force;
    float pressure;
    
};

layout(std430, binding = 0) readonly buffer buffer_inParticle
{
    Particle inParticle[];
};

layout(std430, binding = 1) writeonly buffer buffer_outParticle
{
    Particle outParticle[];
};

layout( push_constant ) uniform constants{
    float deltaTime;
    float particleCount;
};

void main() {
    uint id = gl_GlobalInvocationID.x;

    if(id >= int(particleCount))
    {
        return;
    }

    vec3 accel = inParticle[id].force / inParticle[id].density;
    vec3 vel_new = inParticle[id].velocity + dt * accel;
    vec3 pos_new = inParticle[id].position + dt * vel_new;

    // Überprüfe Randbedingungen x
    if (inParticle[id].position.x < -0.6)
    {
        vel_new.x *= -ABSORBTION;
        pos_new.x = -0.6;
    }
    else if (inParticle[id].position.x > 0.6)
    {
        vel_new.x *= -ABSORBTION;
        pos_new.x = 0.6;
    }

    // Überprüfe Randbedingungen y
    if (inParticle[id].position.y < -0.8)
    {
        vel_new.y *= -ABSORBTION;
        pos_new.y = -0.8;

    }
    else if (inParticle[id].position.y > 0.8)
    {
        vel_new.y *= -ABSORBTION;
        pos_new.y = 0.8;
    }

    // Überprüfe Randbedingungen z
    if (inParticle[id].position.z < -0.6 )
    {
        vel_new.z *= -ABSORBTION;
        pos_new.z = -0.6;
    }
    else if (inParticle[id].position.z > 0.6 )
    {
        vel_new.z *= -ABSORBTION;
        pos_new.z = 0.6;
    }

    outParticle[id].force = inParticle[id].force;
    outParticle[id].density = inParticle[id].density;
    outParticle[id].pressure = inParticle[id].pressure;
    outParticle[id].position = pos_new;
    outParticle[id].velocity = vel_new;
}
